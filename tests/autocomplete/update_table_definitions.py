"""
To allow autocomplete to work with first_for_patient()/last_for_patient() we need to
maintain a set of classes that mirror the event level tables, but with type hints for
a patient level table. E.g. the clinical_events table has columns date, numeric_value
and snomedct_code, so we create a class (purely for type hints) called ClinicalEvents
which also has attributes date, numeric_value and snomedct_code - but with type hints
for DatePatientSeries, FloatPatientSeries and CodePatientSeries.

This script automatically generates the patient level table definitions which are found
in /ehrql/patient_level_table_definitions.
"""

import subprocess
import sys
from pathlib import Path

from ehrql import tables
from ehrql.query_language import BaseSeries, EventFrame, get_tables_from_namespace
from ehrql.utils.module_utils import get_submodules


def to_pascal_case(string: str):
    """
    something_like_this to SomethingLikeThis
    """
    return string.replace("_", " ").title().replace(" ", "")


def class_definition_from_table_name(table_name):
    return f"class {to_pascal_case(table_name)}(PatientLevelTable):"


def class_columns(columns: list[tuple[str, str]]):
    return "\n".join(
        [f"    {column_name}: {column_type}" for column_name, column_type in columns]
    )


def table_definition(table_name, columns):
    return f"{class_definition_from_table_name(table_name)}\n{class_columns(columns)}"


def imports_code(imports):
    separator = "\n    "
    import_statements = f",{separator}".join(sorted(imports))
    return f"from ehrql.query_language import ({separator}{import_statements}\n)\n\n"


def write_definition_file(
    file: Path, imports: set, tables: list[tuple[str, list[tuple[str, str]]]]
):
    if len(tables) == 0:
        return
    imports.add("PatientLevelTable")
    import_code = imports_code(imports)
    warning = (
        "# THIS FILE IS AUTOGENERATED. DO NOT CHANGE IT MANUALLY.\n#\n"
        "# It can be regenerated by executing `just update-patient-level-table-definitions`\n\n"
    )
    table_code = "\n\n".join(
        [table_definition(table_name, columns) for table_name, columns in tables]
    )

    code = warning + import_code + table_code
    code = ruff_format(code)
    file.write_text(code)


def ruff_format(code):
    process = subprocess.run(
        [sys.executable, "-m", "ruff", "format", "-"],
        check=True,
        text=True,
        capture_output=True,
        input=code,
    )
    return process.stdout


def update_table_defs():
    for module in get_submodules(tables):
        imports = set()
        event_level_tables = []
        for table_name, table in get_tables_from_namespace(module):
            columns = []
            if not isinstance(table, EventFrame):
                continue

            for column_name, _ in table.__class__.__dict__.items():
                series = getattr(table, column_name)
                if not isinstance(series, BaseSeries):
                    continue
                series_name = series.__class__.__name__
                patient_series_name = series_name.replace(
                    "EventSeries", "PatientSeries"
                )
                imports.add(patient_series_name)
                columns.append((column_name, patient_series_name))
            if columns:
                event_level_tables.append((table_name, columns))

        write_definition_file(
            Path(
                module.__file__.replace(
                    "/ehrql/tables/", "/ehrql/patient_level_table_definitions/"
                )
            ),
            imports,
            event_level_tables,
        )


if __name__ == "__main__":
    update_table_defs()
