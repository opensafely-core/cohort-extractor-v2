---
name: Update public docs

on:
  workflow_dispatch:
  workflow_run:
    workflows:
      - Build and publish image
    branches:
      - main
    status:
      - completed
  push:
    branches:
      - autogenerate-docs-testing

jobs:
  update-public-docs:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
        with:
          # Required to get previous tags
          fetch-depth: 0
      - uses: "actions/setup-python@v2"
        with:
          python-version: "3.9"
      - uses: extractions/setup-just@v1

      # - name: Generate new public docs file
      #   run: just generate-docs new_public_docs.json

      # - name: Get latest release
      #   id: latest_release
      #   uses: actions/github-script@v6
      #   with:
      #     script: |
      #       response = await github.rest.repos.getLatestRelease({
      #         owner: context.repo.owner,
      #         repo: context.repo.repo,
      #       })
      #       const assets_response = await github.request(response.data.assets_url)
      #       const matching_asset = assets_response.data.find(
      #         asset => asset.browser_download_url.endsWith("public_docs.json")
      #       );
      #       return matching_asset.browser_download_url

      # - name: Check if docs have changed
      #   id: check_docs
      #   run: |
      #     curl -L ${{steps.latest_release.outputs.result}} > latest_release_public_docs.json
      #     echo "::set-output name=DOCS_CHANGED::$(cmp new_public_docs.json latest_release_public_docs.json)"

      - name: Get latest version tag
        id: latest-version-tag
        uses: actions/github-script@v6
        with:
          script: |
            const query = `query($owner:String!, $name:String!) {
              repository(owner:$owner, name:$name) {
                refs(refPrefix: "refs/tags/", first: 20, orderBy: {field: TAG_COMMIT_DATE, direction: DESC}) {
                  edges {
                    node {
                      name
                      target {
                        oid
                        ... on Tag {
                          message
                          commitUrl
                          tagger {
                            name
                            email
                            date
                          }
                        }
                      }
                    }
                  }
                }
              }
            }`;
            const variables = {
              owner: context.repo.owner,
              name: context.repo.repo,
            }
            const result = await github.graphql(query, variables)
            console.log(result.repository.refs.edges)
            const latestVersionTagEdge = result.repository.refs.edges.find(
              tag => tag.node.name.startsWith("z")
              )
            console.log(latestVersionTagEdge)
            if(latestVersionTagEdge){
              return latestVersionTagEdge.node.name
            } else {
              return "no-tag-found"
            }
          result-encoding: string

      - name: Previous commit
        id: previoustagcommit
        # if we are on a tag, should look like `v0.6.0`
        # if we are not on a tag, should look like `v0.6.0-24-gbf6352d`
        run: |
          echo ::set-output name=tag_describe::v0.40.6

      - name: Verify whether we are on a tagged version commit, allows us to short-circuit this workflow
        id: taggedcommit
        if: ${{ steps.previoustagcommit.outputs.tag_describe == steps.latest-version-tag.outputs.result }}
        run: echo ::set-output name=tag::'y'

      # 'Get latest version tag' should only get version tags, but let's verify that
      - name: Fail if no version tag found
        if: ${{ steps.latest-version-tag.outputs.result == 'no-tag-found' }}
        run: |
          /bin/false

      - name: Build image check
        if: ${{ startsWith(steps.taggedcommit.outputs.tag, 'y') }}
        run: |
          echo ${{ steps.latest-version-tag.outputs.result }}

      # - name: Create Release
      #   if: ${{ steps.check_docs.outputs.DOCS_CHANGED }}
      #   id: create-release
      #   uses: actions/create-release@v1
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   with:
      #     tag_name: docs-metadata-${{ github.sha }}
      #     release_name: Databuilder public docs metadata for ${{ github.sha }}
      #     draft: false
      #     prerelease: false

      # - name: Upload Release Asset
      #   if: ${{ steps.check_docs.outputs.DOCS_CHANGED }}
      #   id: upload-release-asset
      #   uses: actions/upload-release-asset@v1
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   with:
      #     upload_url: ${{ steps.create-release.outputs.upload_url }}
      #     asset_path: ./new_public_docs.json
      #     asset_name: public_docs.json
      #     asset_content_type: application/json

      # - name: Trigger update in docs repo
      #   if: ${{ steps.check_docs.outputs.DOCS_CHANGED }}
      #   uses: actions/github-script@v6
      #   env:
      #     DOWNLOAD_URL: ${{ steps.upload-release-asset.outputs.browser_download_url }}
      #     GITHUB_SHA: ${{ github.sha }}
      #   with:
      #     github-token: ${{ secrets.DOCS_WRITE_TOKEN }}
      #     script: |
      #       const { DOWNLOAD_URL, GITHUB_SHA } = process.env
      #       await github.rest.actions.createWorkflowDispatch({
      #         owner: 'opensafely',
      #         repo: 'documentation',
      #         workflow_id: 'update_databuilder_docs.yml',
      #         ref: 'main',
      #         inputs: {'download_url': DOWNLOAD_URL, 'branch_tag': GITHUB_SHA}
      #       })
