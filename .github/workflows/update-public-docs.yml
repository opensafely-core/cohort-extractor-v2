---
name: Update public docs

on:
  workflow_dispatch:
  workflow_run:
    workflows:
      - Build and publish image
    branches:
      - main
    types:
      - completed

jobs:
  update-public-docs:
    runs-on: ubuntu-latest

    env:
      BRANCH: autoupdate-databuilder-docs

    steps:
      - uses: actions/checkout@v3
      - uses: "actions/setup-python@v4"
        with:
          python-version: "3.9"
      - uses: extractions/setup-just@v1

      - name: Generate new public docs file
        run: just generate-docs new_public_docs.json

      - name: Get latest release
        id: latest_release
        uses: actions/github-script@v6
        with:
          script: |
            response = await github.rest.repos.getLatestRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
            })
            const assets_response = await github.request(response.data.assets_url)
            const matching_asset = assets_response.data.find(
              asset => asset.browser_download_url.endsWith("public_docs.json")
            );
            return matching_asset.browser_download_url

      - name: Check if docs have changed since latest release
        id: check_release_changed
        run: |
          curl -L ${{steps.latest_release.outputs.result}} > latest_release_public_docs.json
          echo "::set-output name=DOCS_CHANGED::$(cmp new_public_docs.json latest_release_public_docs.json)"

      - name: Create Release
        if: ${{ steps.check_release_changed.outputs.DOCS_CHANGED }}
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: docs-metadata-${{ github.sha }}
          release_name: Databuilder public docs metadata for ${{ github.sha }}
          draft: false
          prerelease: false

      - name: Upload Release Asset
        if: ${{ steps.check_release_changed.outputs.DOCS_CHANGED }}
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./new_public_docs.json
          asset_name: public_docs.json
          asset_content_type: application/json

      - name: Clone docs repo
        uses: actions/checkout@v3
        with:
          repository: opensafely/documentation
          path: docs
          ref: 'main'
          token: ${{ secrets.DOCS_WRITE_TOKEN }}

      - name: Create or checkout branch
        run: |
          cd docs
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          if test -n "$(git ls-remote --heads origin $BRANCH)"; then
            echo "Checking out existing branch"
            git fetch origin $BRANCH
            git checkout $BRANCH
          else
            echo "Creating new branch"
            git checkout -b $BRANCH
          fi

      - name: Check if docs have changed on docs PR branch
        id: check_docs_changed
        run: |
          echo "::set-output name=DOCS_CHANGED::$(cmp new_public_docs.json docs/public_docs.json)"

      - name: Commit new docs file
        if: ${{ steps.check_docs_changed.outputs.DOCS_CHANGED }}
        run: |
          echo ${{ steps.check_docs_changed.outputs.DOCS_CHANGED }}
          mv new_public_docs.json docs/public_docs.json
          cd docs
          git add public_docs.json
          git commit -m "Update databuilder docs from ${{ github.sha }}"
          git push origin $BRANCH

      # Open a PR for this branch, if one isn't already open
      - name: Open PR
        if: ${{ steps.check_docs_changed.outputs.DOCS_CHANGED }}
        uses: actions/github-script@v6
        env:
          HEAD: "opensafely:${{env.BRANCH}}"
          OWNER: "opensafely"
          REPO: "documentation"
          BRANCH: ${{env.BRANCH}}
        with:
          github-token: ${{ secrets.DOCS_WRITE_TOKEN }}
          script: |
            const { HEAD, OWNER, REPO, BRANCH } = process.env;

            pull_requests = await github.rest.pulls.list({
              owner: OWNER,
              repo: REPO,
              state: 'open',
              head: HEAD,
              base: 'main',
            });

            if (pull_requests.data.length > 0) {
              console.log("Open pull request already exists")
              console.log(pull_requests.data[0])
            } else {
              result = await github.rest.pulls.create({
                title: 'Update databuilder docs',
                owner: OWNER,
                repo: REPO,
                head: BRANCH,
                base: 'main',
              });
              console.log(result.data.url)
            }
